<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- Development环境设定 -->
	<beans profile="development">
		<!-- datasource  -->
		<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
			<property name="locations" value="classpath:properties/application_development.properties" />
		</bean>
	</beans>

	<beans>
		<!-- MasterDataSource -->
		<bean id="dataSource_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="defaultAutoCommit" value="false" />
			<property name="maxActive" value="${jdbc.maxActive}"></property>
			<property name="maxIdle" value="${jdbc.maxIdle}"></property>
			<property name="minIdle" value="${jdbc.minIdle}"></property>
			<property name="maxWait" value="${jdbc.maxWait}"></property>
			<property name="testWhileIdle" value="${jdbc.testWhileIdle}"></property>
			<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"></property>
			<property name="validationQuery" value="${jdbc.validationQuery}"></property>
			<property name="testOnBorrow" value="false"></property>
			<property name="testOnReturn" value="false"></property>
		</bean>
		
		<!-- MasterSqlSessionFactory -->
		<bean id="masterSqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
			<!-- datasource -->
			<property name="dataSource" ref="dataSource_master" />
			<!-- map -->
			<property name="mapperLocations" value="classpath:mvc/com/main/dao/mapper/*Mapper.xml" />
		</bean>
		
		<!-- 事务 -->
		<bean name="transactionManager"
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource_master"></property>
		</bean>
		<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
			<property name="transactionManager" ref="transactionManager" />
			<property name="transactionAttributes">
				<props>
					<prop key="insert*">PROPAGATION_REQUIRED, -Exception</prop>
					<prop key="update*">PROPAGATION_REQUIRED, -Exception</prop>
					<prop key="delete*">PROPAGATION_REQUIRED, -Exception</prop>
					<prop key="select*">PROPAGATION_SUPPORTS,readOnly, -Exception</prop>
					<prop key="get*">PROPAGATION_SUPPORTS,readOnly, -Exception</prop>
					<prop key="find*">PROPAGATION_SUPPORTS,readOnly, -Exception</prop>
					<prop key="search*">PROPAGATION_SUPPORTS,readOnly, -Exception</prop>
				</props>
			</property>
		</bean>
		
		<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
			<property name="interceptorNames">
				<list>
					<value>transactionInterceptor</value>
				</list>
			</property>
			<property name="beanNames">
				<list>
					<value>*ServiceImpl</value>
				</list>
			</property>
		</bean>
		
		<!-- messageresource定義 -->
		<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
			<!-- message不存在时，使用messageCode -->
			<property name="useCodeAsDefaultMessage" value="true" />
			<!-- message定义文件位置 -->
			<property name="basenames">
				<list>
					<value>i18n/message/MessageResources</value>
				</list>
			</property>
		</bean>

		<!-- messageAccessor -->
		<bean class="mvc.com.main.common.core.i18n.I18nMessageAccessor" scope="singleton" />
	
		<!-- log -->
		<bean id = "FWLogger"  class="mvc.com.main.common.core.util.FWLogger" scope="singleton" />
		
		<bean id = "messageUtil"  class="mvc.com.main.common.core.util.MessageUtil" scope="singleton" />
		
		<!-- MasterDao Scan-->
		<bean id="mapperScaner_master" class="org.mybatis.spring.mapper.MapperScannerConfigurer" >
			<property name="basePackage" value="mvc.com.main.dao" />
			<property name="annotationClass" value="mvc.com.main.common.integration.dao.annotation.DaoMaster"/>
			<property name="sqlSessionFactoryBeanName" value="masterSqlSessionFactoryBean" />
		</bean>
		
		<!-- Service Scan -->
		<context:component-scan base-package="mvc.com.main.service"  use-default-filters="false">
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		</context:component-scan>

		<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java 
		<bean id="yzwxRealm" class="ustc.yzwx.presentation.realm.YzwxRealm">
			<property name="credentialsMatcher">
				<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
					<property name="hashAlgorithmName" value="MD5"></property>
					<property name="hashSalted" value="true" ></property>
					<property name="hashIterations" value="1" />
				</bean>
			</property>
		</bean>-->
		
		<!-- <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
			<property name="realm" ref="yzwxRealm"/>
		</bean>
		
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
			Shiro的核心安全接口,这个属性是必须的
			<property name="securityManager" ref="securityManager"/>
			要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面
			<property name="loginUrl" value="/"/>
			用户访问未对其授权的资源时,所显示的连接
			若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp
			<property name="unauthorizedUrl" value="/"/>
			<property name="filterChainDefinitions">
				<value>
					/static/** = anon
					/login = anon
					/wechat/** = anon
					/mob/** = anon
					/** = authc
				</value>
			</property>
		</bean> -->
		
		<!-- <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" /> -->
		
	</beans>
</beans>